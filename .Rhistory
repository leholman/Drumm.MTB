inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
minimumReads <- function(data, minreads) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(data) && !is.matrix(data)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(data, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(data))) {stop("Data contains NA values, which are not allowed.")}
# Store original row names
original_row_names <- row.names(data)
# Apply thresholding operation based on the structure of the data
if (is.matrix(data)) {
# For matrices, use vectorized operation
data[data <= minreads] <- 0
} else if (is.data.frame(data)) {
# For data frames, apply operation column-wise
data <- as.data.frame(lapply(data, function(x) ifelse(x <= minreads, 0, x)))
}
# Get rid of empty rows
# For both data frames and matrices, rowSums works and subsetting by rowSums > 0 removes empty rows
outdata <- data[rowSums(data > 0) > 0, ]
row.names(outdata) <- original_row_names[rowSums(data > 0) > 0]
# Return the cleaned data
return(outdata)
}
minimumReps <- function(data,min_obs) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(data) && !is.matrix(data)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(data, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(data))) {stop("Data contains NA values, which are not allowed.")}
# Store original row names
original_row_names <- row.names(data)
# Determine the input type to return the same type
input_type <- ifelse(is.data.frame(data), "data.frame", "matrix")
# Calculate the number of non-zero observations per row
total_obs <- apply(data, 1, function(row) sum(row > 0, na.rm = TRUE))
# Filter rows based on the user-specified minimum number of non-zero observations
filtered_data <- data[total_obs >= min_obs, ]
# Reapply the original row names to the filtered data
row.names(filtered_data) <- original_row_names[total_obs >= min_obs]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
dataCleanBy <- function(inputdata, cleaningdata, method) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(inputdata) && !is.matrix(inputdata)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(inputdata, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(inputdata))) {stop("Data contains NA values, which are not allowed.")}
# Validate method parameter
if (!method %in% c("max", "min", "avr")) {
stop("Method must be 'max', 'min', or 'avr'.")
}
# Preserve original format of inputdata
inputIsDataFrame <- is.data.frame(inputdata)
# Convert dataframes to matrices for uniform processing
inputdata <- as.matrix(inputdata)
cleaningdata <- as.matrix(cleaningdata)
# Ensure both inputs contain only numeric values
if (!all(is.numeric(inputdata)) || !all(is.numeric(cleaningdata))) {
stop("Both inputs must contain only numeric values.")
}
# Ensure both inputs have the same number of rows
if (nrow(inputdata) != nrow(cleaningdata)) {
stop("Both inputs must have the same number of rows.")
}
# Calculate a metric for each row in cleaningdata based on the specified method
metric_values <- switch(method,
"max" = apply(cleaningdata, 1, max),
"min" = apply(cleaningdata, 1, min),
"avr" = apply(cleaningdata, 1, mean))
# Vectorized update of inputdata based on the calculated metrics
metric_matrix <- matrix(rep(metric_values, each = ncol(inputdata)),
nrow = nrow(inputdata),
byrow = TRUE)
inputdata[inputdata <= metric_matrix] <- 0
# Remove rows in inputdata with only zero values
inputdata2 <- inputdata[rowSums(inputdata != 0) > 0, ]
message(paste0("Removed ",dim(inputdata)[1]-dim(inputdata2)[1]," ASV/OTUs from samples"))
# Return inputdata in its original format
if (inputIsDataFrame) {
return(as.data.frame(inputdata2))
} else {
return(inputdata2)
}
}
### Global settings
min_reads <- 2
min_reps <- 2
comp_method <- "avr"
exp1 <- minimumReads(exp)
exp1 <- minimumReads(exp,minreads = 2)
exp1 <- dataCleanBy(exp,controls,"avr")
exp2 <- minimumReads(exp1,minreads = 2)
View(controls)
colSums(controls)
colSums(exp)
## some functions
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
##libraries
library(RColorBrewer)
## some functions
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
minimumReads <- function(data, minreads) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(data) && !is.matrix(data)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(data, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(data))) {stop("Data contains NA values, which are not allowed.")}
# Store original row names
original_row_names <- row.names(data)
# Apply thresholding operation based on the structure of the data
if (is.matrix(data)) {
# For matrices, use vectorized operation
data[data <= minreads] <- 0
} else if (is.data.frame(data)) {
# For data frames, apply operation column-wise
data <- as.data.frame(lapply(data, function(x) ifelse(x <= minreads, 0, x)))
}
# Get rid of empty rows
# For both data frames and matrices, rowSums works and subsetting by rowSums > 0 removes empty rows
outdata <- data[rowSums(data > 0) > 0, ]
row.names(outdata) <- original_row_names[rowSums(data > 0) > 0]
# Return the cleaned data
return(outdata)
}
minimumReps <- function(data,min_obs) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(data) && !is.matrix(data)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(data, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(data))) {stop("Data contains NA values, which are not allowed.")}
# Store original row names
original_row_names <- row.names(data)
# Determine the input type to return the same type
input_type <- ifelse(is.data.frame(data), "data.frame", "matrix")
# Calculate the number of non-zero observations per row
total_obs <- apply(data, 1, function(row) sum(row > 0, na.rm = TRUE))
# Filter rows based on the user-specified minimum number of non-zero observations
filtered_data <- data[total_obs >= min_obs, ]
# Reapply the original row names to the filtered data
row.names(filtered_data) <- original_row_names[total_obs >= min_obs]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
dataCleanBy <- function(inputdata, cleaningdata, method) {
# Ensure the input is either a dataframe or matrix and is numeric
if (!is.data.frame(inputdata) && !is.matrix(inputdata)) {stop("Input must be a dataframe or matrix")}
if (!all(sapply(inputdata, is.numeric))) {stop("Error: All values must be numeric or integer.")}
# Check for NA values
if (any(is.na(inputdata))) {stop("Data contains NA values, which are not allowed.")}
# Validate method parameter
if (!method %in% c("max", "min", "avr")) {
stop("Method must be 'max', 'min', or 'avr'.")
}
# Preserve original format of inputdata
inputIsDataFrame <- is.data.frame(inputdata)
# Convert dataframes to matrices for uniform processing
inputdata <- as.matrix(inputdata)
cleaningdata <- as.matrix(cleaningdata)
# Ensure both inputs contain only numeric values
if (!all(is.numeric(inputdata)) || !all(is.numeric(cleaningdata))) {
stop("Both inputs must contain only numeric values.")
}
# Ensure both inputs have the same number of rows
if (nrow(inputdata) != nrow(cleaningdata)) {
stop("Both inputs must have the same number of rows.")
}
# Calculate a metric for each row in cleaningdata based on the specified method
metric_values <- switch(method,
"max" = apply(cleaningdata, 1, max),
"min" = apply(cleaningdata, 1, min),
"avr" = apply(cleaningdata, 1, mean))
# Vectorized update of inputdata based on the calculated metrics
metric_matrix <- matrix(rep(metric_values, each = ncol(inputdata)),
nrow = nrow(inputdata),
byrow = TRUE)
inputdata[inputdata <= metric_matrix] <- 0
# Remove rows in inputdata with only zero values
inputdata2 <- inputdata[rowSums(inputdata != 0) > 0, ]
message(paste0("Removed ",dim(inputdata)[1]-dim(inputdata2)[1]," ASV/OTUs from samples"))
# Return inputdata in its original format
if (inputIsDataFrame) {
return(as.data.frame(inputdata2))
} else {
return(inputdata2)
}
}
### Global settings
min_reads <- 2
min_reps <- 2
comp_method <- "avr"
library(RColorBrewer)
### read in metadata
metadata <- readxl::read_excel("LV til kilde_nix pille.xlsx")
metadata$`Nyt navn uden formel`
metadata$sample <- sapply(strsplit(metadata$`Nyt navn uden formel`, "\\."), `[`, 2)
metadata$exp <- sapply(strsplit(metadata$`Nyt navn uden formel`, "\\."), `[`, 1)
## First V9
eukv9.dat <- read.csv("rawdata/eukv9.raw.names.csv.gz")
eukv9.asv <- seqinr::read.fasta("rawdata/OTUS/EUKv9.DADA2.ASVs.fasta",as.string = TRUE)
eukv9.pr2 <- read.csv("taxonomy/eukv9.tax.PR2.csv")
unique(metadata$exp)
metadata$LV[metadata$sample=="C"]
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C"],colnames(eukv9.dat))]
colnames(controls)
waterAVR <- rowMeans(eukv9.dat[,match(metadata$LV[metadata$sample=="W"],colnames(eukv9.dat))])
sedAVR <- rowMeans(eukv9.dat[,match(metadata$LV[metadata$sample=="S"],colnames(eukv9.dat))])
## division
eukv9.c <-   as.matrix(minAbundance(CountTable(as.character(eukv9.pr2$Division),cbind(controls,sedAVR,waterAVR),output = "Abundance"),minAbun=0.01))
row.names(eukv9.c)[1] <- "Unknown"
pdf("figures/controls.div.pdf",width=11,height=6)
par(mar=c(8.5, 6.1, 1.1, 6.1),xpd=TRUE)
barplot(eukv9.c[,dim(eukv9.c)[2]:1],las=2,cex.names=0.6,col=getPalette(dim(eukv9.c)[1]),ylab="",border = NA,
names=rev(c(metadata$`Nyt navn uden formel`[match(colnames(controls),metadata$LV)],"sediment_mean","water_mean")))
mtext("Read Abundance",side = 2,line=5)
legend(48.5,1200000,rev(rownames(eukv9.c)),col=getPalette(dim(eukv9.c)[1]),cex=0.7,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
## class
eukv9.c <-   as.matrix(minAbundance(CountTable(as.character(eukv9.pr2$Class),cbind(controls,sedAVR,waterAVR),output = "Abundance"),minAbun=0.01))
row.names(eukv9.c)[1] <- "Unknown"
pdf("figures/controls.cls.pdf",width=11,height=6)
par(mar=c(8.5, 6.1, 1.1, 6.1),xpd=TRUE)
barplot(eukv9.c[,dim(eukv9.c)[2]:1],las=2,cex.names=0.6,col=getPalette(dim(eukv9.c)[1]),ylab="",border = NA,
names=rev(c(metadata$`Nyt navn uden formel`[match(colnames(controls),metadata$LV)],"sediment_mean","water_mean")))
mtext("Read Abundance",side = 2,line=5)
legend(48.5,1400000,rev(rownames(eukv9.c)),col=getPalette(dim(eukv9.c)[1]),cex=0.4,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
## division prop
eukv9.c <-   as.matrix(minAbundance(CountTable(as.character(eukv9.pr2$Division),prop.table(as.matrix(cbind(controls,sedAVR,waterAVR)),margin=2),output = "Abundance"),minAbun=0.01))
row.names(eukv9.c)[1] <- "Unknown"
pdf("figures/controls.div.prop.pdf",width=11,height=6)
par(mar=c(8.5, 6.1, 1.1, 6.1),xpd=TRUE)
barplot(eukv9.c[,dim(eukv9.c)[2]:1],las=2,cex.names=0.6,col=getPalette(dim(eukv9.c)[1]),ylab="",border = NA,
names=rev(c(metadata$`Nyt navn uden formel`[match(colnames(controls),metadata$LV)],"sediment_mean","water_mean")))
mtext("Read Abundance",side = 2,line=5)
legend(48.5,1,rev(rownames(eukv9.c)),col=getPalette(dim(eukv9.c)[1]),cex=0.7,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
## class prop
eukv9.c <-   as.matrix(minAbundance(CountTable(as.character(eukv9.pr2$Class),prop.table(as.matrix(cbind(controls,sedAVR,waterAVR)),margin=2),output = "Abundance"),minAbun=0.01))
row.names(eukv9.c)[1] <- "Unknown"
pdf("figures/controls.class.prop.pdf",width=11,height=6)
par(mar=c(8.5, 6.1, 1.1, 6.1),xpd=TRUE)
barplot(eukv9.c[,dim(eukv9.c)[2]:1],las=2,cex.names=0.6,col=getPalette(dim(eukv9.c)[1]),ylab="",border = NA,
names=rev(c(metadata$`Nyt navn uden formel`[match(colnames(controls),metadata$LV)],"sediment_mean","water_mean")))
mtext("Read Abundance",side = 2,line=5)
legend(48.5,1,rev(rownames(eukv9.c)),col=getPalette(dim(eukv9.c)[1]),cex=0.4,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
unique(metadata$exp)
experiment <- "ECOTIP"
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"avr")
exp2 <- minimumReads(exp1,minreads = 2)
View(exp2)
colnames(exp2)
match(colnames(exp2),metadata$LV)
View(metadata)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls) <- metadata$`Nyt navn uden formel`[match(colnames(controls),metadata$LV)]
View(controls)
controls1 <- minimumReads(controls,minreads = 1)
View(controls1)
rownames(exp2)
View(eukv9.pr2)
eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),]
test <- eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),]
View(test)
View(exp2)
eukv9.nt <- read.csv("taxonomy/parsed.Ev9.csv")
View(eukv9.nt)
match(rownames(exp2),names(eukv9.asv))
eukv9.asv[match(rownames(exp2),names(eukv9.asv))]
un.list(eukv9.asv[match(rownames(exp2),names(eukv9.asv))])
unlist(eukv9.asv[match(rownames(exp2),names(eukv9.asv))])
exp.out <-cbind(exp2,names(unlist(eukv9.asv[match(rownames(exp2),names(eukv9.asv))])),unlist(eukv9.asv[match(rownames(exp2),names(eukv9.asv))]),eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
View(exp.out)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
View(controls1)
controls1 <- minimumReads(controls,minreads = 1)
View(controls1)
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"avr")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
View(controls1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
View(controls1)
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
View(ctl.out)
outname <- paste0("cleandata/eukv9.",experiment,".csv")
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
write.csv(ctl.out,outname2)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
?dataCleanBy
dataCleanBy
exp1 <- dataCleanBy(exp,controls,"max")
exp1 <- dataCleanBy(exp,controls,"avr")
exp1 <- dataCleanBy(exp,controls,"min")
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
unique(metadata$exp)
for (experiment in unique(metadata$exp)){
print(experiment)
}
for (experiment in unique(metadata$exp)){
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
}
unique(metadata$exp)
experiment <- "ICE018"
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
View(exp2)
View(controls1)
### Global settings
min_reads <- 2
min_reps <- 2
comp_method <- "avr"
library(RColorBrewer)
metadata <- readxl::read_excel("LV til kilde_nix pille.xlsx")
metadata$`Nyt navn uden formel`
metadata$sample <- sapply(strsplit(metadata$`Nyt navn uden formel`, "\\."), `[`, 2)
metadata$exp <- sapply(strsplit(metadata$`Nyt navn uden formel`, "\\."), `[`, 1)
for (experiment in unique(metadata$exp)){
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
}
experiment <- "ICE018"
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
experiment <- "ICE018"
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
View(exp)
unique(metadata$exp)
experiment <- "ICE019"
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & metadata$exp==experiment ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& metadata$exp==experiment],colnames(eukv9.dat))]
View(test)
View(metadata)
View(metadata)
unique(metadata$exp)
experiments <- c("ICE","ECOTIP","ROCS")
grep(experiment,metadata$exp)
experiment <- "ICE"
grep(experiment,metadata$exp)
experiment <- "ECOTIP"
grep(experiment,metadata$exp)
grepl(experiment,metadata$exp)
experiments <- c("ICE","ECOTIP","ROCS")
for (experiment in experiments){
controls <- eukv9.dat[,match(metadata$LV[metadata$sample=="C" & grepl(experiment,metadata$exp) ],colnames(eukv9.dat))]
exp <- eukv9.dat[,match(metadata$LV[(metadata$sample=="W" | metadata$sample=="S")& grepl(experiment,metadata$exp)],colnames(eukv9.dat))]
exp1 <- dataCleanBy(exp,controls,"max")
exp2 <- minimumReads(exp1,minreads = 2)
controls1 <- minimumReads(controls,minreads = 1)
colnames(exp2) <- metadata$`Nyt navn uden formel`[match(colnames(exp2),metadata$LV)]
colnames(controls1) <- metadata$`Nyt navn uden formel`[match(colnames(controls1),metadata$LV)]
exp.out <-cbind(exp2,eukv9.pr2[match(rownames(exp2),eukv9.pr2$X.1),],eukv9.nt[match(rownames(exp2),eukv9.nt$OTU),])
ctl.out <-cbind(controls1,eukv9.pr2[match(rownames(controls1),eukv9.pr2$X.1),],eukv9.nt[match(rownames(controls1),eukv9.nt$OTU),])
outname <- paste0("cleandata/eukv9.",experiment,".csv")
write.csv(exp.out,outname)
outname2 <- paste0("controlData/eukv9.",experiment,".csv")
write.csv(ctl.out,outname2)
}
